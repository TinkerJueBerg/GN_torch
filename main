from __future__ import absolute_import 
from __future__ import division 
from __future__ import print_function  
import codecs   
import os   
import random   
import shutil   
from PIL import Image   
import os 
import numpy as np 
import time 
import math 
import codecs 
import logging 
from PIL import Image 
from PIL import ImageEnhance 
import zipfile
from numpy import *
import random
import torch
import torch.nn as nn
import torch.nn.functional as F
from torchvision import datasets,transforms
from torch.autograd import Variable
from torchstat import stat
#from net import simpleconv3



class GN(nn.Module):
    def __init__(self, in_channels, out_channels, **kwargs):
        super(BasicConv2d, self).__init__()
        self.conv= nn.Conv2d(in_channels, out_channels, bias=False, **kwargs)
        self.bn = nn.BatchNorm2d(out_channels, eps=0.001)

    def forward(self, x):
        x = self.conv(x)
        x = self.bn(x)
        return x

class Inception(nn.Module):
    def __init__(self, in_channels):
        super(Inception, self).__init__()
        self.branch1x1 = GN(in_channels, 64, kernel_size=1)

        self.branch5x5_1 = GN(in_channels, 48, kernel_size=1)
        self.branch5x5_2 = GN(48, 64, kernel_size=5, padding=2)

        self.branch3x3_1 = GN(in_channels, 64, kernel_size=1)
        self.branch3x3_2 = GN(64, 96, kernel_size=3, padding=1)
        self.branch3x3_3 = GN(96, 96, kernel_size=3, padding=1)

        self.branchpool_1 = nn.MaxPool2d(kernel_size=3, stride=1)
        self.branch_pool = GN(in_channels, 64, kernel_size=1, padding=1)

    def forward(self, x):
        branch1x1 = self.branch1x1(x)
        #print('branch1x1_size: ', branch1x1.size())
        branch5x5 = self.branch5x5_1(x)
        branch5x5 = self.branch5x5_2(branch5x5)
        #print('branch5x5_size: ', branch5x5.size())
        branch3x3 = self.branch3x3_1(x)
        branch3x3 = self.branch3x3_2(branch3x3)
        branch3x3 = self.branch3x3_3(branch3x3)
        #print('branch3x3_size: ', branch3x3.size())
        branch_pool = self.branchpool_1(x)
        branch_pool = self.branch_pool(branch_pool)
        #print('branch_pool_size: ', branch_pool.size())
        outputs = [branch1x1, branch5x5, branch3x3, branch_pool]

        return torch.cat(outputs, 1)
